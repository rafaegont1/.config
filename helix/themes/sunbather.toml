# NOTE: Keys default to the most specific parent value.
#       e.g ui.cursor.primary > ui.cursor > ui



# GENERAL ==============================

error   = { fg = "red" }          # Editor errors, like mis-typing a command.
warning = { fg = "light_yellow" } # Editor warnings.
info    = { fg = "lighter_blue" } # Contextual info in diagnostic messages (LSP).
hint    = { fg = "medium_gray" }  # Code diagnostics hints (LSP).

# Code diagnostics in editing area (LSP).
"diagnostic.error"   = { underline = { color = "red",          style = "line" } }
"diagnostic.warning" = { underline = { color = "light_yellow", style = "line" } }
"diagnostic.info"    = { underline = { color = "light_blue",   style = "dotted" } }
"diagnostic.hint"    = { underline = { color = "medium_gray",  style = "double_line" } }
"diagnostic.debug"   = { underline = { color = "light_gray",   style = "dashed" } }

# UI ==============================
# For styling helix itself.

'ui.background' = { fg = "actual_white", bg = "black" } # Default background color.
'ui.window'     = { fg = "subtle_black" }               # Window border between splits.
'ui.gutter'     = { } # Left gutter for diagnostics and breakpoints.

'ui.text'       = { fg = "lighter_gray" } # Default text color.
'ui.text.focus' = { fg = "light_green" }  # Selection highlight in buffer-picker or file-picker.
'ui.text.info'  = { bg = "subtle_black" } # Info popup contents (space mode menu).

'ui.cursor'         = { modifiers = ["reversed"] } # Fallback cursor colour, non-primary cursors when there are multiple (shift-c).
'ui.cursor.primary' = { modifiers = ["reversed"] } # The primary cursor when there are multiple (shift-c).
'ui.cursor.insert'  = { } # The cursor in insert mode (i).
'ui.cursor.select'  = { } # The cursor in select mode (v).
'ui.cursor.match'   = { fg = "light_green", underline = { color = "light_green", style = "line" } } # The matching parentheses of that under the cursor.

'ui.selection'         = { fg = "light_green", underline = { color = "light_green", style = "line" } } # All currently selected text.
'ui.selection.primary' = { bg = "subtle_black" } # The primary selection when there are multiple.

'ui.linenr'          = { fg = "lighter_black" } # Line numbers.
'ui.linenr.selected' = { fg = "medium_gray" }   # Current line number.

'ui.virtual'            = { fg = "lighter_black" }                     # Namespace for additions to the editing area.
'ui.virtual.ruler'      = { } # Vertical rulers (colored columns in editing area).
'ui.virtual.whitespace' = { fg = "light_black" } # Whitespace markers in editing area.
'ui.virtual.jump-label' = { fg = "light_green", modifiers = ["bold"] } # Style for virtual jump labels

'ui.statusline'          = { fg = "light_pink", bg = "subtle_black" }    # Status line.
'ui.statusline.inactive' = { fg = "lighter_black", bg = "subtle_black" } # Status line in unfocused windows.
"ui.statusline.normal"   = { } # Statusline mode during normal mode (only if editor.color-modes is enabled)
"ui.statusline.insert"   = { } # Statusline mode during insert mode (only if editor.color-modes is enabled)
"ui.statusline.select"   = { } # Statusline mode during select mode (only if editor.color-modes is enabled)

'ui.help' = { bg = "subtle_black" } # `:command` descriptions above the command line.

'ui.highlight' = { bg = "subtle_black" } # selected contents of symbol pickers (spc-s, spc-S) and current line in buffer picker (spc-b).

'ui.menu'          = { bg = "subtle_black" } # Autocomplete menu.
'ui.menu.selected' = { fg = "light_green"} # Selected autocomplete item.

'ui.popup'      = { fg = "light_cyan", bg = "subtle_black" } # Documentation popups (space-k).
'ui.popup.info' = { bg = "subtle_black" } # Info popups box (space mode menu).

'ui.debug.breakpoint' = {fg = "light_blue"} # Breakpoint indicator, found in the gutter
'ui.debug.active'     = { bg = "light_blue" } # Indicator for the line at which debugging execution is paused at, found in the gutter


# SYNTAX HIGHLIGHTING ==============================
# All the keys here are Treesitter scopes.

'property'  = { } # Regex group names.
'special'   = { } # Special symbols e.g `?` in Rust, `...` in Hare.
'attribute' = { } # Class attributes, html tag attributes.

'type'              = { modifiers = ["italic"] } # Variable type, like integer or string, including program defined classes, structs etc..
'type.builtin'      = { modifiers = ["italic"] } # Primitive types of the language (string, int, float).
'type.enum.variant' = { }                        # A variant of an enum.

'constructor' = { } # Constructor method for a class or struct.

'constant'                  = { fg = "light_pink" }  # Constant value
'constant.builtin'          = { fg = "light_pink" }  # Special constants like `true`, `false`, `none`, etc.
'constant.builtin.boolean'  = { fg = "light_pink" }  # True or False.
'constant.character'        = { fg = "light_pink" }  # Constant of character type.
'constant.character.escape' = { fg = "medium_gray" } # escape codes like \n.
'constant.numeric'          = { fg = "light_pink" }  # constant integer or float value.
'constant.numeric.integer'  = { fg = "light_pink" }  # constant integer value.
'constant.numeric.float'    = { fg = "light_pink" }  # constant float value.

'string'                = { fg = "light_pink" }  # String literal.
'string.regexp'         = { fg = "medium_gray" } # Regular expression literal.
'string.special'        = { } # Strings containing a path, URL, etc.
'string.special.path'   = { } # String containing a file path.
'string.special.url'    = { } # String containing a web URL.
'string.special.symbol' = { } # Erlang/Elixir atoms, Ruby symbols, Clojure keywords.

'comment'                     = { fg = "lighter_black", modifiers = ["italic"] } # This is a comment.
'comment.line'                = { } # Line comments, like this.
'comment.block'               = { } # Block comments, like /* this */ in some languages.
'comment.block.documentation' = { } # Doc comments, e.g '///' in rust.

'variable'              = { } # Variable names.
'variable.builtin'      = { fg = "medium_gray" } # Language reserved variables: `this`, `self`, `super`, etc.
'variable.parameter'    = { } # Function parameters.
'variable.other.member' = { } # Fields of composite data types (e.g. structs, unions).

'label' = { } # Loop labels, among other things.

'punctuation'           = { } # Any punctuation symbol.
'punctuation.delimiter' = { } # Commas, colons or other delimiter depending on the language.
'punctuation.bracket'   = { } # Parentheses, angle brackets, etc.

'keyword'                     = { fg = "medium_gray" } # Language reserved keywords.
'keyword.control'             = { fg = "medium_gray" } # Control keywords.
'keyword.control.conditional' = { fg = "medium_gray" } # `if`, `else`, `elif`.
'keyword.control.repeat'      = { fg = "medium_gray" } # `for`, `while`, `loop`.
'keyword.control.import'      = { fg = "medium_gray" } # `import`, `export` `use`.
'keyword.control.return'      = { fg = "medium_gray" } # `return` in most languages.
'keyword.control.exception'   = { fg = "medium_gray" } # `try`, `catch`, `raise`/`throw` and related.
'keyword.operator'            = { fg = "medium_gray" } # `or`, `and`, `in`.
'keyword.directive'           = { fg = "medium_gray" } # Preprocessor directives (#if in C...).
'keyword.function'            = { fg = "medium_gray" } # The keyword to define a function: 'def', 'fun', 'fn'.

'operator' = { } # Logical, mathematical, and other operators.

'function'         = { modifiers = ["bold"] }
'function.builtin' = { }
'function.method'  = { } # Class / Struct methods.
'function.macro'   = { }
'function.special' = { } # Preprocessor function in C.

'tag'       = { } # As in <body> for html, css tags.
'tag.error' = { } # Erroneous closing html tags.

'namespace' = { modifiers = ["italic"] } # Namespace or module identifier.


# Markup ==============================
# Colors for markup languages, like Markdown or XML.

'markup.heading.1'      = { } # Markdown heading 1 color.
'markup.heading.2'      = { } # Markdown heading 2 color.
'markup.heading.3'      = { } # Markdown heading 3 color.
'markup.heading.4'      = { } # Markdown heading 4 color.
'markup.heading.5'      = { } # Markdown heading 5 color.
'markup.heading.6'      = { } # Markdown heading 6 color.
'markup.heading.marker' = { } # Hashtag color on Markdown headings.

'markup.list'            = { }
'markup.list.numbered'   = { } # Numbered list.
'markup.list.unnumbered' = { } # Bullet point list.

'markup.bold'   = { modifiers = ["bold"] }   # Bold text.
'markup.italic' = { modifiers = ["italic"] } # Italicised text.

'markup.link'       = { }
'markup.link.url'   = { } # Urls pointed to by links.
'markup.link.label' = { } # Non-URL link references.
'markup.link.text'  = { } # URL and image descriptions in links.

'markup.quote' = { } # `> Quotes` in Markdown.


# Markup - Interface ==============================
# "These scopes are used for theming the editor interface."

'markup.normal'            = { }
'markup.normal.completion' = { } # For completion doc popup ui.
'markup.normal.raw'        = { } # For hover popup ui.

'markup.heading.completion' = { } # Headings for completion doc popup ui.
'markup.heading.raw'        = { } # Headings for hover popup ui.

'markup.raw'                   = { } # Code block in Markdown.
'markup.raw.block'             = { } # Multiline (```) codeblock in Markdown.
'markup.raw.inline'            = { } # `Inline code block` in Markdown.
'markup.raw.inline.completion' = { } # ?
'markup.raw.inline.hover'      = { } # ?

# Diff ==============================
# Version control changes.

'diff.plus'        = { fg = "light_cyan" }   # Additions.
'diff.minus'       = { fg = "light_red" }    # Deletions.
'diff.delta'       = { fg = "light_yellow" } # Modifications.
'diff.delta.moved' = { fg = "dark_green" }   # Renamed or moved files.


[palette] # Define your custom colors here.
black         = "#000000"
subtle_black  = "#121212"
light_black   = "#262626"
lighter_black = "#4E4E4E"
medium_gray   = "#767676"
light_gray    = "#A8A8A8"
lighter_gray  = "#C6C6C6"
lightest_gray = "#EEEEEE"
white         = "#F1F1F1"
actual_white  = "#FFFFFF"
red           = "#FF0000"
dark_pink     = "#FF5F87"
light_pink    = "#D75F87"
dark_red      = "#C30771"
light_red     = "#E32791"
orange        = "#D75F5F"
darker_blue   = "#005F87"
dark_blue     = "#008EC4"
blue          = "#20BBFC"
light_blue    = "#B6D6FD"
dark_cyan     = "#20A5BA"
light_cyan    = "#4FB8CC"
dark_green    = "#10A778"
light_green   = "#5FD7A7"
light_purple  = "#A790D5"
yellow        = "#F3E430"
light_yellow  = "#FFFF87"
dark_yellow   = "#A89C14"
